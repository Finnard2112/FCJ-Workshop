<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Incident Response with Forensics Integration on AWS System Manager</title><link>/</link><description>Recent content in Security Incident Response with Forensics Integration on AWS System Manager</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring EventBridge</title><link>/3-security-automation/3.1-configure-event-bridge/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/3-security-automation/3.1-configure-event-bridge/</guid><description>This sections walks through the process of editing your Amazon EventBridge rule to make it more specific. By default, the rule might be broad. This procedure will configure it to trigger your security workflow only for the specific types of finding.
Step 1: Navigate to Amazon EventBridge In the AWS Management Console, type &amp;ldquo;EventBridge&amp;rdquo; in the search bar and select it.
Step 2: Select Your Rule In the left-hand navigation pane, click on Rules.</description></item><item><title>Deploy using CloudFormation</title><link>/2-prepare-environment/2.1-deploy-cloudformation/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/2-prepare-environment/2.1-deploy-cloudformation/</guid><description>This guide provides step-by-step instructions for deploying the complete Security Automation platform using the AWS Management Console and a CloudFormation template.
Prerequisites Before you begin, you will need:
An AWS Account with administrative permissions. The final IaC.yaml CloudFormation template file for this project, downloaded to your local machine. Step 1: Navigate to CloudFormation In the AWS Management Console, type &amp;ldquo;CloudFormation&amp;rdquo; into the search bar and select it. Ensure you are in your desired AWS Region.</description></item><item><title>Configuring the Serverless Aplication</title><link>/2-prepare-environment/2.2-configuring-application/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/2-prepare-environment/2.2-configuring-application/</guid><description>After your CloudFormation stack has been successfully created, there are a few essential configuration steps you must complete manually to make the platform fully operational.
1. Adding Code to Your Lambda Functions The CloudFormation template deployed all seven of your Lambda functions with simple placeholder code. You now need to upload the actual application and security logic for each one.
Prepare Your Code: For each of your seven Lambda functions, visit the following link to download the lambda code and see additional instructions for configuration https://github.</description></item><item><title>Prepare Test Event</title><link>/3-security-automation/3.2-prepare-test-event/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/3-security-automation/3.2-prepare-test-event/</guid><description>To accurately test our security automation workflow, we need a realistic event payload. This guide walks through the process of generating sample threat detections in AWS GuardDuty, finding a specific event, and customizing it to target a real Lambda function in our account.
Step 1: Generate Sample Findings in GuardDuty First, we will have GuardDuty create a set of safe, mock threat detections.
Navigate to the AWS GuardDuty console. In the left-hand navigation menu, click on Settings.</description></item><item><title>Project Goals</title><link>/1-introduction/1.1-project-goals/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/1-introduction/1.1-project-goals/</guid><description>Content:
üéØ General Objective ‚è±Ô∏è Specific Objectives 1. Reduce Mean Time to Respond (MTTR) 2. Automate Forensic Evidence Collection 3. Ensure Consistent and Repeatable Responses üéØ General Objective The primary goal of this project is to design, build, and deploy a robust, event-driven platform on AWS that automates the end-to-end security incident response lifecycle. This system will transition our security operations from a slow, manual, and reactive model to a proactive, consistent, and near-instantaneous automated model.</description></item><item><title>Purpose and Applications</title><link>/1-introduction/1.2-purpose-and-applications/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/1-introduction/1.2-purpose-and-applications/</guid><description>This section details the rationale for building the security automation platform on AWS, outlines practical use cases, and explores future scalability.
Content:
üåê Why use AWS for automated incident response? üìå Applicable Use Cases üöÄ Future Scalability üåê Why use AWS for automated incident response? Building a security automation platform with native AWS serverless services offers distinct advantages over traditional, on-premise, or third-party solutions.
Speed through Event-Driven Architecture: The entire platform is built on an event-driven model.</description></item><item><title>Setting up security automation</title><link>/3-security-automation/3.3-setting-up-automation/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/3-security-automation/3.3-setting-up-automation/</guid><description>We need to set up a few more components for our security automation pipeline
1. Create Athena Table The TimelineAnalysisLambda needs a table in Athena to query your CloudTrail logs. You must create this manually.
Go to the Amazon Athena console. Follow the steps in the AWS Documentation to create a table from the logs in your new CloudTrailBucket. The bucket&amp;rsquo;s name is available in the Outputs tab of your CloudFormation stack.</description></item><item><title>In Depth Design</title><link>/1-introduction/1.3-in-depth-design/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/1-introduction/1.3-in-depth-design/</guid><description>This document provides a detailed breakdown of the two main components of this project: the core serverless application and the automated security pipeline that protects it.
Content:
üèóÔ∏è Core Application Architecture Component Breakdown Typical Request Flow üõ°Ô∏è Automated Security Pipeline The Incident Response Lifecycle üèóÔ∏è Core Application Architecture The underlying application is a modern, serverless e-commerce backend built entirely on managed AWS services. This design ensures high availability, automatic scaling, and cost-efficiency by eliminating the need for traditional server management.</description></item><item><title>Testing the security pipeline</title><link>/3-security-automation/3.4-testing-security-pipeline/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>/3-security-automation/3.4-testing-security-pipeline/</guid><description>This guide provides the final end-to-end test for your security automation pipeline. We will manually send a crafted test event to the Amazon EventBridge event bus to simulate a threat detection, which will trigger your entire Step Functions workflow.
Step 1: Prepare the Test Event Payload Copy the JSON template from 3.2 From following section 3.2, you should have a sample GuardDuty UnauthorizedAccess:Lambda/TorRelay finding.
Step 2: Send the event through EventBridge Navigate to the Amazon EventBridge console.</description></item></channel></rss>