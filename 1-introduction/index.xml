<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Create a new AWS account.</title><link>https://finnard2112.github.io/FCJ-Workshop/1-introduction/</link><description>Recent content in Introduction on Create a new AWS account.</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://finnard2112.github.io/FCJ-Workshop/1-introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Project Goals</title><link>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.1-project-goals/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.1-project-goals/</guid><description>Content:
🎯 General Objective ⏱️ Specific Objectives 1. Reduce Mean Time to Respond (MTTR) 2. Automate Forensic Evidence Collection 3. Ensure Consistent and Repeatable Responses 🎯 General Objective The primary goal of this project is to design, build, and deploy a robust, event-driven platform on AWS that automates the end-to-end security incident response lifecycle. This system will transition our security operations from a slow, manual, and reactive model to a proactive, consistent, and near-instantaneous automated model.</description></item><item><title>Purpose and Applications</title><link>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.2-purpose-and-applications/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.2-purpose-and-applications/</guid><description>This section details the rationale for building the security automation platform on AWS, outlines practical use cases, and explores future scalability.
Content:
🌐 Why use AWS for automated incident response? 📌 Applicable Use Cases 🚀 Future Scalability 🌐 Why use AWS for automated incident response? Building a security automation platform with native AWS serverless services offers distinct advantages over traditional, on-premise, or third-party solutions.
Speed through Event-Driven Architecture: The entire platform is built on an event-driven model.</description></item><item><title>In Depth Design</title><link>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.3-in-depth-design/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://finnard2112.github.io/FCJ-Workshop/1-introduction/1.3-in-depth-design/</guid><description>This document provides a detailed breakdown of the two main components of this project: the core serverless application and the automated security pipeline that protects it.
Content:
🏗️ Core Application Architecture Component Breakdown Typical Request Flow 🛡️ Automated Security Pipeline The Incident Response Lifecycle 🏗️ Core Application Architecture The underlying application is a modern, serverless e-commerce backend built entirely on managed AWS services. This design ensures high availability, automatic scaling, and cost-efficiency by eliminating the need for traditional server management.</description></item></channel></rss>